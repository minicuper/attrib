_ = require 'lodash'
util = require 'dm-util'

module.exports = class FormEditor extends require('../input')
  view: __dirname
  style: __dirname
  name: 'dm-form:editor'

  components: [
    require './field'
  ]

  init: ->
    super

    @model.start 'indexes', 'valueIds', (arr) ->
      if _.isArray(arr)
        [0...arr.length]
      else
        []

  add: (index) ->
    newIssueId = @getNewIssueId('iNewIssue')
    @model.set "value.#{ newIssueId }", {}

    if index?
      console.log 'Insert', index
      @model.insert 'valueIds', index, newIssueId
    else
      @model.push 'valueIds', newIssueId

    @_rerender()

  _getNewIssueId: (newIssueType, issueIds = [])->

    reg = new RegExp("^#{ newIssueType }(\\d+)$")

    maxIndex = 0

    for issueId in issueIds
      res = issueId.match(reg)

      continue unless res

      [str, index] = res
      index = +index

      maxIndex = index if index > maxIndex

    "#{ newIssueType }#{ maxIndex + 1 }"

  getNewIssueId: (issueName = '') ->
    match = /(\d*)$/.exec(issueName)
    if match
      suffix = match[1] || ''
      name = issueName.substring(0, issueName.length - suffix.length)
    else
      name = issueName

    @_getNewIssueId(name, @model.get('valueIds'))


  duplicate: (itemId, index) ->
    copy = @model.getDeepCopy("value.#{ itemId }")

    newItemId = @getNewIssueId(itemId)

    @model.insert 'valueIds', index, newItemId
    @model.set "value.#{ newItemId }", copy

    @_rerender()

  remove: (itemId) ->
    return unless itemId

    return unless confirm('Are you sure you want to remove this item?')
    index = (@model.get('valueIds') || []).indexOf itemId

    return unless index?

    @model.remove "valueIds", index
    @model.del "value.#{ itemId }"

    @_rerender()

  hasChecked: (checked = []) ->
    for item in checked
      return true if item
    false

  checkAll: ->
    length = (@model.get('valueIds') || []).length
    for i in [0...length]
      @model.set "checked.#{ i }", true

  uncheckAll: ->
    @model.del 'checked'

  _rerender: ->
    @uncheckAll()
    @model.set 'rerender', !@model.get('rerender')

  removeSelected: ->
    checked = @model.get('checked') || []
    length = (@model.get('valueIds') || []).length
    return if length is 0
    return unless confirm 'Are you sure you want to remove selected items?'
    for i in [(length - 1)..0] when checked[i]
      id = @model.remove 'valueIds', i
      @model.del "value.#{ id }"

    @_rerender()

  allChecked: (checked = [], length = 0) ->
    return false if length is 0
    for i in [0...length]
      return false unless checked[i]
    true

  _getChecked: ->
    checked = @model.get('checked') || []
    length = (@model.get('valueIds') || []).length

    data =
      valueIds: []
      value: {}

    data.valueIds = for i in [0...length] when checked[i]
      id = @model.get("valueIds.#{ i }")
      data.value[id] = @model.getDeepCopy("value.#{ id }")
      id

    data

  copyToClipboard: ->
    copy = @_getChecked()
    @model.set 'clipboard', copy

  pasteFromClipboard: (index) ->
    length = (@model.get('valueIds') || []).length
    if length is 0
      index = 0
    else if not index? or index > length
      index = length

    {value, valueIds} = @model.getDeepCopy('clipboard') || {}

    value ?= {}
    valueIds ?= []

    # transform valueIds

    newValueIds = for valueId in valueIds

      newValueId = @getNewIssueId valueId
      @model.set("value.#{ newValueId }", value[valueId])
      newValueId

    @model.insert 'valueIds', index, newValueIds
    @_rerender()

  clearClipboard: ->
    @model.del 'clipboard'

  export: ->
    copy = @_getChecked()
    util.file.downloadBlobJson copy

  import: (index) ->
    util.file.upload (err, text, filename) =>
      console.log 'ERROR', err if err
      return if err
      try
        copy = JSON.parse(text)
      catch e
        return alert 'Error importing - ' + e
      console.log 'IMPORT', JSON.stringify(copy, null, '  '), filename

      length = (@model.get('valueIds') || []).length

      if length is 0
        index = 0
      else if not index? or index > length
        index = length

      {value, valueIds} = copy

      value ?= {}
      valueIds ?= []

      newValueIds = for valueId in valueIds

        newValueId = @getNewIssueId valueId
        @model.set("value.#{ newValueId }", value[valueId])
        newValueId

      @model.insert 'valueIds', index, newValueIds
      @_rerender()

  editName: (oldName, newName) ->
    index = (@model.get('valueIds') || []).indexOf(oldName)

    return if index is -1

    data = @model.get "value.#{ oldName }"

    silent = @model.silent()

    silent.del("value.#{ oldName }")
    silent.set("value.#{ newName }", data)

    @model.set "valueIds.#{index}", newName

    @_rerender()
    console.log 'editName', oldName, newName
