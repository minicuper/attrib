FormText = require '../text'

module.exports = class FormRange extends FormText
  view: __dirname
  style: __dirname
  name: 'dm-form:range'

  _getExtraFields: ->
    super().concat [
      'min'
      'max'
      'step'
      'measure'
    ]

  init: ->
    super

    @circleWidth = 12
    @shiftOfOnePercent = 12 / 100

    @max = @getMetaAttribute('max') || 100
    @min = @getMetaAttribute('min') || 0
    @step = @getMetaAttribute('step') || 1
    @range = @max - @min
    @tooltipTemplate = @getMetaAttribute('tooltipTemplate')

    unless @initValue = @model.get('value')
      middle = @range / 2
      remainder = middle % @step
      @initValue = if remainder then middle - remainder else middle

    @model.set 'offsetLeft', 0
    @model.set 'circleWidth', @circleWidth
    @model.set '_value', @initValue

  create: ->
    super
    @_setTooltipPosition(@initValue)

    @model.on 'change', 'max', (value) =>
      @max = value
      @range = @max - @min
      @_setTooltipPosition(@model.get('_value'))

    @model.on 'change', 'min', (value) =>
      @min = value
      @range = @max - @min
      @_setTooltipPosition(@model.get('_value'))

    @model.on 'change', '_value', (value) =>
      @_setTooltipPosition(value)

  _setTooltipPosition: (value) ->
    tooltipWidth = @tooltip.getBoundingClientRect()?.width
    offsetLeft = (value - @min) / @range * 100
    offsetCenterCircle = offsetLeft * @shiftOfOnePercent
    @model.set 'tooltipWidth', tooltipWidth
    @model.set 'offsetCenterCircle', offsetCenterCircle
    @model.set 'offsetLeft', offsetLeft

  formatTooltip: (value, measure) ->
    tooltipText = value
    tooltipText += measure if measure
    return unless value?
    if @tooltipTemplate
      tooltipText = @tooltipTemplate.replace(/\%s/g, tooltipText)
    tooltipText
