_ = require 'lodash'
utils = require '../utils'

module.exports = class FormCollection extends require('../input')
  view: __dirname
  name: 'dm-form:collection'

  init: ->
    super
    patternKey = Object.keys(@meta.get('patternProperties'))[0]
    @model.ref 'items', @meta.at 'patternProperties.' + patternKey

    if @_hasAttribute('order')
      @model.setNull 'order', []

    if @model.get('order')?
      @model.refList 'values', 'value', @model.at('order')
    else
      @model.at('value').filter(null).ref @model.at('values')

  create: ->
    @model.on 'change', 'value.*.id', (id, newKey) =>
      prevValue = @model.del("value.#{ id }")
      return unless prevValue
      @model.setDiff "value.#{ newKey }", prevValue
      order = @model.get('order')?
      return unless order
      index = order.indexOf(prevValue)
      return if index is -1
      @model.setDiff "order.#{ index }", newKey

  add: ->
    newField = (@model.del('newField') || '').trim()
    return unless newField
    newField = utils.camelCase(newField)
    @model.push 'values', id: newField
    @emit 'add', newField

  remove: (item) ->
    return unless item
    @model.at('value').del item.get('id')

  toggle: (itemId) ->
    @model.silent().set 'edit', itemId
    @model.set 'rerender', !@model.get('rerender')