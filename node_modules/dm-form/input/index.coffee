_ = require 'lodash'
derbyTemplates = require 'derby-templates'
templates = derbyTemplates.templates
expressions = derbyTemplates.expressions


module.exports = class FormInput

  # Hack: 'hidden' plugs in generic styles for .Input because 'input'
  # is a virtual component

  init: ->
    @_setMetaRefs() if @_hasAttribute('meta')
    @_refValueIntoObject @getAttribute('_name') if @_hasAttribute('object')
    @_setDefault()
    @model.start '_layout', 'layout', @_getLayout.bind(@)

  create: ->
    if @_hasAttribute('object')
      @model.on 'change', '_name', (name) =>
        if name instanceof templates.ParentWrapper
          name = name.get(@context.forAttribute('_name'))
        @_refValueIntoObject name

    @on 'validateError', @_setError.bind(@)

  _modelAttribute: do ->
    modelAttributes =
      id: '_name'
      layout: 'layout'
    (key) ->
      modelAttributes[key] || @_getModelAttributes?()?[key]

  _getGeneralFields: do ->
    fields = [
      'label'
      'layout'
      'description'
      'default'
      'placeholder'
      'input'
      'appearence'
      'class'
      'readonly'
      'disabled'
    ]
    -> fields

  _setMetaRefs: ->
    fields = @_getGeneralFields().concat(@_getExtraFields?() || [])
    for field in fields
      if modelAttr = @_modelAttribute(field)
        unless @_hasAttribute(modelAttr)
          @model.ref modelAttr, @model.at('meta.' + field)
      else
        unless @_hasAttribute(field)
          @_refMetaAttribute field
    true

  _hasAttribute: (key) ->
    @context.forAttribute(key)?

  # Create a reference on another attribute
  # Usage: @refAttribute('key', 'attributePath')
  #   attributePath is another attribute or field in attribute.
  # Examples:
  #   @refAttribute 'title', 'headline'
  #   @refAttribute 'name', 'meta.user.name'
  #   @refAttribute 'year', 'person.university.endYear'
  refAttribute: (key, attributePath) ->
    segments = attributePath.split('.')
    attribute = segments.shift()
    attributeContext = this.context.forAttribute(attribute)
    return unless attributeContext

    expression = new expressions.AttributePathExpression attribute, segments,
      new expressions.ExpressionMeta('@' + attributePath)

    parentWrapper = new templates.ParentWrapper(
        new templates.DynamicText(expression), expression)

    @setAttribute key, parentWrapper

  _refMetaAttribute: (key, metaKey = key) ->
    @refAttribute key, 'meta.' + metaKey

  getMetaAttribute: (key) ->
    @getAttribute(key) || @getAttribute('meta')?[key]

  _refObjectKeys: (key, attributePath) ->
    segments = attributePath.split('.')
    attribute = segments.shift()
    attributeContext = this.context.forAttribute(attribute)
    return unless attributeContext

    expression = new expressions.FnExpression(
      ['Object', 'keys'],
      [new expressions.OperatorExpression(
        '||',
        [new expressions.AttributePathExpression(attribute, segments),
         new expressions.LiteralExpression({})]
      )],
      undefined,
      new expressions.ExpressionMeta("Object.keys( @#{ attributePath } || {} )")
    )
    parentWrapper = new templates.ParentWrapper(
        new templates.DynamicText(expression), expression)

    @setAttribute key, parentWrapper

  _setDefault: ->
    _default = @getAttribute('meta')?.default || @getAttribute('default')
    if _default?
      @model.setNull 'value', _.cloneDeep(_default)

  _refValueIntoObject: (name) ->
    return if name is @model.get('_currentName')
    @model.ref 'value', @model.at('object.' + @_sanitizeName(name))
    @model.set '_currentName', name

  _sanitizeName: (name) ->
    return name unless name
    return JSON.stringify(name) unless _.isString(name)
    name.replace /^\$+/g, ''

  _getLayout: (layout) ->
    return layout if layout
    hasLabel = ['meta', 'label', 'description'].some @_hasAttribute.bind(@)
    if hasLabel
      'columns'
    else
      'pure'

  _setError: (text) ->
    if text
      errors = @model.get('errors') || []
      @model.push('errors', text) unless text in errors
    else
      @model.del 'errors'

  clear: ->
    @model.del('value') if @model.get('value')?
